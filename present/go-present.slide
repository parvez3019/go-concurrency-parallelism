*


*

.background titles/title.png

* Agenda :
- Brief introduction to Go
- Understand goroutines, waitgroups, mutexes & channels.
- High level overview of the Golang scheduler
- Understanding concurrency and parallelism with the help of programs and visualisation
- Gotchas of writing concurrent/parallel programs
- Success stories

*

.background titles/briefintro.png


* Some basic stuff in Go
Let's try to print our collective feelings in one sentence.

.play example.go

* Some basic stuff in Go
Varible intialization

.play basicVariable.go /START OMIT/,/END OMIT/

* Some basic stuff in Go
If-Else & For loop

.play if-else.go /START OMIT/,/END OMIT/

* Now let's start
Let's try to hit these websites and print the response in console.

.play websiteWithoutRoutines.go /START OMIT/,/END OMIT/


*

.background titles/goroutines.png

*
A goroutine is a lightweight thread managed by the Go runtime.

.image gofunc.jpeg 300 800

*
Let's run printResponse function go routine

.play goroutines.go /START OMIT/,/END OMIT/

* The main function is a go routine
Even more important to know is that once the main function returns, it closes all other go routines that are currently running.

.image maingopher.jpeg 300 800


*
Let's wait for go routines to finish.

.play goroutines-sleep.go /START OMIT/,/END OMIT/


*

.background titles/wait.png

*
To wait for multiple goroutines to finish, we can use a wait group.

.play waitGroup.go /START OMIT/,/END OMIT/

*

.background titles/mutex.png

*
A Mutex ensures ownership of a resource to one goroutine at a time

.play mutex.go /START OMIT/,/END OMIT/
.image race.png 200 800

*

.background titles/channels.png

*
Channels can be thought as pipes through which goroutines communicate.

.image channelsgopher.jpeg 400 700

*
Adding channel to get the responses instead of an array.

.code channels.go /START OMIT/,/END OMIT/

.play channels2.go /START OMIT/,/END OMIT/

* Any questions until now?

.image questionsgopher.jpeg 400 600

*

.background titles/understanding.png

* Recap of Concurrency
- Dealing with a lot of things at the same time
- It is more about the structure of your program
- Can use one or more CPU cores

* Example (Concurrency)

.play pingpong.go /START OMIT/,/END OMIT/

* Visualising ping pong match

.image titles/conc_latest.gif

* Recap of Parallelism
- Doing a lot of things at the same time
- Can only be achieved in multi core systems (unless hyper-threading is enabled)
- E.g - Coding and listening to music at the same time

* Example (Parallelism)

.play fib.go /START OMIT/,/END OMIT/

* Visualising fibonnaci calculation

.image titles/par_lat.gif

* Concurrency with parallelism
- It is possible to run your concurrent code in parallel
- An example would be running multiple pingpong matches at the same time

* So when should we use what?
- There is no silver bullet, it depends on the problem you're solving
- For CPU heavy tasks use parallelism
- For network/IO heavy tasks use concurrency

* Questions until now?

.image questionsgopher.jpeg 400 600


*

.background titles/gotachas.png

* Gotchas of Concurrent/Parallel programs
- Spawning many goroutines will *not* always give you better performance
- Goroutine leaks
- Increasing GOMAXPROCS value does *not* mean your code will run faster
- Shared memory for local variables can lead to undesired state
- Cooperative scheduling can starve goroutines

*

.background titles/scheduler.png

* Responsibility

- Schedules M number of goroutines on N number of OS threads (M:N scheduling)
- Uses cooperative scheduling instead of preemptive scheduling
- Context switching
- Written in Go


* M:N scheduling

.image titles/m-n1.jpg



* Basic concepts

- G -- Goroutine
- M -- OS thread
- P -- Processor(abstracted concept)
- Local Run Queue (LRQ)
- Global Run Queue (GRQ)


*

.background titles/gpm.png


* Where does the Go Scheduler fit in?

.image titles/exe.png



* Why do we need a scheduler?
-


* Questions until now?

.image questionsgopher.jpeg 400 600


*

.background titles/success.png

*

.image success/uber.png 600 800

*

.image success/twitch.png 600 1000

*

.image success/twitter.png 600 1000

*

.image micdrop.png 600 600


*

.background titles/thankyou.png
