*


*

.background titles/title.png

* Agenda :
- Brief introduction to Go
- Understand goroutines, waitgroups, mutexes & channels.
- High level overview of the Golang scheduler
- Understanding concurrency and parallelism with the help of programs and visualisation
- Gotchas of writing concurrent/parallel programs
- Success stories

*

.background titles/briefintro.png


* Some basic stuff in Go
Let's print your horoscope for today

.play example.go

* Some basic stuff in Go
Varible intialization

.play basicVariable.go /START OMIT/,/END OMIT/

* Some basic stuff in Go
If-Else & For loop

.play if-else.go /START OMIT/,/END OMIT/

* Now let's start
Let's try to hit these websites and print the response in console.

.play websiteWithoutRoutines.go /START OMIT/,/END OMIT/


*

.background titles/goroutines.png

* Go Routines
A goroutine is a lightweight thread managed by the Go runtime.

.play goroutines.go /START OMIT/,/END OMIT/

* Go Routines
Adding sleep to main

.play goroutines-sleep.go /START OMIT/,/END OMIT/

*

.background titles/wait.png

* Wait groups
Adding wait groups

.play WaitGroup.go /START OMIT/,/END OMIT/

*

.background titles/mutex.png

* Mutexes
A Mutex is used to provide a locking mechanism to ensure that only one Goroutine is running the critical section of code at any point of time to prevent race condition from happening.

.play mutex.go /START OMIT/,/END OMIT/
.image race.png 200 800

*

.background titles/channels.png

* Channels
Channels Channels are the pipes that connect concurrent goroutines.

.code channels.go /START OMIT/,/END OMIT/

.play channels2.go /START OMIT/,/END OMIT/

*

.background titles/scheduler.png

* The Go Scheduler
- Basic stuff about the Go Scheduler.

*

.background titles/understanding.png

* What is  Concurrency? :
- Dealing with a lot of things at the same time.
- It is more about the structure of your program.
- Has nothing to do with number of cores in a system.

* Example (Concurrency)

.play pingpong.go /START OMIT/,/END OMIT/

* What is  Parallelism?
- Doing a lot of things at the same time.
- Can only be achieved in multi core systems.
- E.g - Coding and listening to music at the same time.

* Example (Parallelism)

.play fib.go /START OMIT/,/END OMIT/

* Concurrency with parallelism
Content.

* Example (Concurrency with parallelism)

.play websiteWithoutRoutines.go /START OMIT/,/END OMIT/

* So when should we use what?
- It depends.
- For CPU heavy tasks use parallelism.
- For network/IO heavy tasks use concurrency.
- There is no silver bullet.


*

.background titles/gotachas.png

* Gotchas of Concurrent/Parallel programs
- Spawning many goroutines will *not* always give you better performance
- Shared memory for local variables can lead to undesired state
- Cooperative scheduling can starve goroutines
- Increasing GOMAXPROCS value does *not* mean your code will run faster
- Goroutine leaks

*

.background titles/success.png

*

.image success/uber.png 600 800

*

.image success/twitch.png 600 1000

*

.image success/twitter.png 600 1000

*

.image micdrop.png 600 600


*

.background titles/thankyou.png
